# -*- ini -*-
[buildout]

parts =
    zope2
    instance
    zopepy
    plone
    productdistros
    test
    test-recorder

find-links =
    http://download.zope.org/distribution/
    http://effbot.org/downloads

# FIXME: There probably is a way to query buildout as to where it's
# putting the eggs ...
eggs =
     simplejson 
#     elementtree
#     lxml
#     sqlalchemy

develop =
    src/zc.table
    src/zc.resourcelibrary
    src/five.intid
    src/yoma.batching
    src/ore.viewlet
    src/ore.xd
    src/hurry.workflow
    src/getpaid.core
    src/getpaid.io
    src/getpaid.nullpayment
#    src/gchecky
#    src/getpaid.googlecheckout
#    src/getpaid.authorizedotnet
#    src/zc.authorizedotnet
#    src/getpaid.paypal
    recipes

[plone]
recipe = plone.recipe.plone25install
url = http://plone.googlecode.com/files/Plone-2.5.4-2.tar.gz

# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL, 
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
[productdistros]
recipe = plone.recipe.distros
urls =
    http://codespeak.net/z3/five/release/Five-1.4.2.tgz
    http://codespeak.net/z3/cmfonfive/release/CMFonFive-1.3.4.tgz
    http://plone.org/products/plone-hotfix/releases/20071106-2/PloneHotfix20071106.tar.gz
nested-packages =
version-suffix-packages = 

[test-recorder]
recipe = infrae.subversion
urls =
    svn://svn.zope.org/repos/main/zope.testrecorder/trunk/src/zope/testrecorder testrecorder


[zope2]
recipe = plone.recipe.zope2install
url = http://www.zope.org/Products/Zope/2.9.8/Zope-2.9.8-final.tgz

[test]
recipe = zc.recipe.testrunner
eggs = ${buildout:eggs}
       getpaid.core
       getpaid.io
       getpaid.nullpayment 
       hurry.workflow
       ore.xd
extra-paths = ${zope2:location}/lib/python

[instance]
recipe = plone.recipe.zope2instance
zope2-location = ${zope2:location}
user = admin:admin
debug-mode = on
eggs =
    ${buildout:eggs}
    zc.resourcelibrary
    zc.table
    five.intid
    yoma.batching
    ore.viewlet
    ore.xd
    hurry.workflow
    getpaid.core
    getpaid.nullpayment
    getpaid.io
#    zc.authorizedotnet
#    getpaid.authorizedotnet
#    gchecky
#    getpaid.googlecheckout
#    getpaid.paypal

products =
    ${buildout:directory}/develop-products
    ${buildout:directory}/develop-debug
    ${buildout:directory}/parts/plone
    ${buildout:directory}/parts/test-recorder
    ${buildout:directory}/parts/five


[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
extra-paths = ${zope2:location}/lib/python
scripts = zopepy

[cleanup]
recipe = recipes:cleanup

[ipzope]
# a IPython Shell for interactive use with zope running. you also need to put
# https://svn.plone.org/svn/collective/dotipython/trunk/ipy_profile_zope.py
# to your $HOME/.ipython directory for the following to work.
#recipe = zc.recipe.egg
#eggs =
#   ipython
#   ${instance:eggs}
#initialization =
#    import sys, os
#    os.environ["SOFTWARE_HOME"] = "${zope2:location}/lib/python"
#    os.environ["INSTANCE_HOME"] = "${instance:location}"
#    sys.argv[1:1] = "-p zope".split()
#extra-paths = ${zope2:location}/lib/python
#scripts = ipython=ipzope
